* A Notification Server for Emacs

DNel is an Emacs package that implements a
[[https://people.gnome.org/~mccann/docs/notification-spec/notification-spec-latest.html][Desktop Notifications service]]
in pure Lisp, aspiring to be a small, but flexible drop-in replacement for
standalone daemons like [[https://dunst-project.org/][Dunst]].
Active notifications are tracked in the global variable ~dnel-state~
whenever the global minor mode ~dnel-mode~ is active.
Users are free to monitor the contents of that variable as they see fit, though
DNel does provide some additional convenience functions.

** Getting Started

For now, simply execute the ~package-install-file~ command and point it to a
local copy of this repository.
The package will hopefully end up on [[https://melpa.org][MELPA]] in due time.
After installation, ensure that no other notification daemon is active, execute
~dnel-mode~, and make use of your session's currently active notifications in
~dnel-state~ whenever the hook ~dnel-state-changed-hook~ runs (read on for some
suggestions).
Enjoy!

*** Use Case 1: Show Active Notifications

Simply showing all active notifications in the mode-line can be accomplished by
defining a function that returns the notifications as a string:
#+NAME: list
#+BEGIN_SRC emacs-lisp :tangle yes
(defun list-notifications (state)
  (mapconcat (apply-partially #'dnel-format-notification state) (cdr state) ""))
#+END_SRC

The function is called from the mode line for every change to the notifications:
#+BEGIN_SRC emacs-lisp
(nconc global-mode-string '((:eval (list-notifications dnel-state))))
(add-hook 'dnel-state-changed-functions (lambda (&rest _)
                                          (force-mode-line-update t)))
#+END_SRC

Every notification has text properties so that
- hovering over its summary displays the body as a tooltip,
- the left mouse button invokes the notification's default action,
- the middle mouse button shows a menu of all available actions, and
- the right mouse button closes the notification.

*** Use Case 2: Stack Active Notifications by Application

Instead of showing all notifications, it is possible to only display the newest
notification per application by defining an appropriate function:
#+NAME: stack
#+BEGIN_SRC emacs-lisp :tangle yes
(defun stack-notifications (state &optional hide)
  (mapconcat (lambda (notification)
               (let ((app-name (plist-get (cdr notification) 'app-name)))
                 (if (member app-name hide) ""
                   (push app-name hide)
                   (dnel-format-notification state notification))))
             (cdr state) ""))
#+END_SRC

It is called exactly the same as the function in the previous case:
#+BEGIN_SRC emacs-lisp
(nconc global-mode-string '((:eval (stack-notifications dnel-state))))
(add-hook 'dnel-state-changed-functions (lambda (&rest _)
                                          (force-mode-line-update t)))
#+END_SRC

