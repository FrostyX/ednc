* The Emacs Desktop Notification Center

The Emacs Desktop Notification Center (EDNC) is
an Emacs package written in pure Lisp that
implements a Desktop Notifications service according to
[[https://people.gnome.org/~mccann/docs/notification-spec/notification-spec-latest.html][the freedesktop.org specification]].
EDNC aspires to be a small, but flexible drop-in replacement
of standalone daemons like [[https://dunst-project.org/][Dunst]].
A global minor mode ~ednc-mode~ tracks active notifications,
which users can access by calling the function ~ednc-notifications~.
They are also free to add their own functions
to the (abnormal) hook ~ednc-notification-amendment-functions~
to amend arbitrary data and
to the (abnormal) hook ~ednc-notification-presentation-functions~
to present notifications as they see fit.
To be useful out of the box,
default hooks record all notifications
in an interactive log buffer ~*ednc-log*~.

** Basic Usage

For now, simply execute the ~package-install-file~ command and
point it to a local copy of this repository.
The package will hopefully end up on [[https://melpa.org][MELPA]] in due time.

After installation, ensure that no other notification daemon is active,
execute the ~ednc-mode~ command to activate the global minor mode, and
observe the interactive log buffer ~*ednc-log*~.

You can use the following keybindings by default:
#+BEGIN_html
<ul><li><kbd>Return</kbd> or <kbd>mouse-1</kbd> (left click)
        invokes the notification's default action,</li>
    <li><kbd>C-mouse-1</kbd>
        pops to the notification in the interactive log buffer,</li>
    <li><kbd>down-mouse-2</kbd> (middle mouse button)
        shows a menu of all available actions, and</li>
    <li><kbd>d</kbd> or <kbd>mouse-3</kbd> (right click)
        closes the notification.</li></ul>
#+END_html

** Advanced Usage

You can also
retrieve currently active notifications with the function ~ednc-notifications~
whenever the (abnormal) hook ~ednc-notification-presentation-functions~ runs.
Functions in this hook are given access to
the exact notification that was removed, added, or replaced.
Read on for some suggestions.

*** Show Active Notifications in Mode Line

To simply display all active notifications in the mode line,
first define a function that returns active notifications as a string:
#+NAME: list
#+BEGIN_SRC emacs-lisp :tangle yes
(defun list-notifications ()
  (mapconcat #'ednc-format-notification (ednc-notifications) ""))
#+END_SRC

Alternatively, only include the newest notification per application:
#+NAME: stack
#+BEGIN_SRC emacs-lisp :tangle yes
(defun stack-notifications (&optional hide)
  (mapconcat (lambda (notification)
               (let ((app-name (ednc-notification-app-name notification)))
                 (unless (member app-name hide)
                   (push app-name hide)
                   (ednc-format-notification notification))))
             (ednc-notifications) ""))
#+END_SRC

Use the respective function's result as part of your mode line
every time a new notification appears, or an old one is removed:
#+BEGIN_SRC emacs-lisp
(nconc global-mode-string '((:eval (stack-notifications))))  ; or list
(add-hook 'ednc-notification-presentation-functions
          (lambda (&rest _) (force-mode-line-update t)))
#+END_SRC

*** Pop to Buffer for Every New Notification

If you want to create a new buffer for every new notification
(instead of or in addition to displaying it in the mode line)
first define a function uses of the abnormal hook's arguments:
#+NAME: buffer
#+BEGIN_SRC emacs-lisp :tangle yes
(defun show-notification-in-buffer (old new)
  (let ((name (format "Notification %d" (ednc-notification-id (or old new)))))
    (with-current-buffer (get-buffer-create name)
      (if new (let ((inhibit-read-only t))
                (if old (erase-buffer) (ednc-view-mode))
                (insert (ednc-format-notification new t))
                (pop-to-buffer (current-buffer)))
        (kill-buffer)))))
#+END_SRC

Then ensure the function is called at the appropriate moment:
#+BEGIN_SRC emacs-lisp
(add-hook 'ednc-notification-presentation-functions
          #'show-notification-in-buffer)
#+END_SRC
